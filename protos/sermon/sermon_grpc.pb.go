// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sermon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SermonClient is the client API for Sermon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SermonClient interface {
	GetSermon(ctx context.Context, in *GetSermonRequest, opts ...grpc.CallOption) (*GetSermonResponse, error)
	GetAllSermons(ctx context.Context, in *GetAllSermonsRequest, opts ...grpc.CallOption) (*GetAllSermonsResponse, error)
	CreateSermon(ctx context.Context, in *CreateSermonRequest, opts ...grpc.CallOption) (*CreateSermonResponse, error)
	DeleteSermon(ctx context.Context, in *DeleteSermonRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateSermon(ctx context.Context, in *UpdateSermonRequest, opts ...grpc.CallOption) (*UpdateSermonResponse, error)
}

type sermonClient struct {
	cc grpc.ClientConnInterface
}

func NewSermonClient(cc grpc.ClientConnInterface) SermonClient {
	return &sermonClient{cc}
}

func (c *sermonClient) GetSermon(ctx context.Context, in *GetSermonRequest, opts ...grpc.CallOption) (*GetSermonResponse, error) {
	out := new(GetSermonResponse)
	err := c.cc.Invoke(ctx, "/Sermon/GetSermon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sermonClient) GetAllSermons(ctx context.Context, in *GetAllSermonsRequest, opts ...grpc.CallOption) (*GetAllSermonsResponse, error) {
	out := new(GetAllSermonsResponse)
	err := c.cc.Invoke(ctx, "/Sermon/GetAllSermons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sermonClient) CreateSermon(ctx context.Context, in *CreateSermonRequest, opts ...grpc.CallOption) (*CreateSermonResponse, error) {
	out := new(CreateSermonResponse)
	err := c.cc.Invoke(ctx, "/Sermon/CreateSermon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sermonClient) DeleteSermon(ctx context.Context, in *DeleteSermonRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Sermon/DeleteSermon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sermonClient) UpdateSermon(ctx context.Context, in *UpdateSermonRequest, opts ...grpc.CallOption) (*UpdateSermonResponse, error) {
	out := new(UpdateSermonResponse)
	err := c.cc.Invoke(ctx, "/Sermon/UpdateSermon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SermonServer is the server API for Sermon service.
// All implementations must embed UnimplementedSermonServer
// for forward compatibility
type SermonServer interface {
	GetSermon(context.Context, *GetSermonRequest) (*GetSermonResponse, error)
	GetAllSermons(context.Context, *GetAllSermonsRequest) (*GetAllSermonsResponse, error)
	CreateSermon(context.Context, *CreateSermonRequest) (*CreateSermonResponse, error)
	DeleteSermon(context.Context, *DeleteSermonRequest) (*Empty, error)
	UpdateSermon(context.Context, *UpdateSermonRequest) (*UpdateSermonResponse, error)
	mustEmbedUnimplementedSermonServer()
}

// UnimplementedSermonServer must be embedded to have forward compatible implementations.
type UnimplementedSermonServer struct {
}

func (UnimplementedSermonServer) GetSermon(context.Context, *GetSermonRequest) (*GetSermonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSermon not implemented")
}
func (UnimplementedSermonServer) GetAllSermons(context.Context, *GetAllSermonsRequest) (*GetAllSermonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSermons not implemented")
}
func (UnimplementedSermonServer) CreateSermon(context.Context, *CreateSermonRequest) (*CreateSermonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSermon not implemented")
}
func (UnimplementedSermonServer) DeleteSermon(context.Context, *DeleteSermonRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSermon not implemented")
}
func (UnimplementedSermonServer) UpdateSermon(context.Context, *UpdateSermonRequest) (*UpdateSermonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSermon not implemented")
}
func (UnimplementedSermonServer) mustEmbedUnimplementedSermonServer() {}

// UnsafeSermonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SermonServer will
// result in compilation errors.
type UnsafeSermonServer interface {
	mustEmbedUnimplementedSermonServer()
}

func RegisterSermonServer(s grpc.ServiceRegistrar, srv SermonServer) {
	s.RegisterService(&_Sermon_serviceDesc, srv)
}

func _Sermon_GetSermon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSermonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SermonServer).GetSermon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sermon/GetSermon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SermonServer).GetSermon(ctx, req.(*GetSermonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sermon_GetAllSermons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSermonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SermonServer).GetAllSermons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sermon/GetAllSermons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SermonServer).GetAllSermons(ctx, req.(*GetAllSermonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sermon_CreateSermon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSermonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SermonServer).CreateSermon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sermon/CreateSermon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SermonServer).CreateSermon(ctx, req.(*CreateSermonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sermon_DeleteSermon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSermonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SermonServer).DeleteSermon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sermon/DeleteSermon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SermonServer).DeleteSermon(ctx, req.(*DeleteSermonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sermon_UpdateSermon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSermonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SermonServer).UpdateSermon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sermon/UpdateSermon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SermonServer).UpdateSermon(ctx, req.(*UpdateSermonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sermon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sermon",
	HandlerType: (*SermonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSermon",
			Handler:    _Sermon_GetSermon_Handler,
		},
		{
			MethodName: "GetAllSermons",
			Handler:    _Sermon_GetAllSermons_Handler,
		},
		{
			MethodName: "CreateSermon",
			Handler:    _Sermon_CreateSermon_Handler,
		},
		{
			MethodName: "DeleteSermon",
			Handler:    _Sermon_DeleteSermon_Handler,
		},
		{
			MethodName: "UpdateSermon",
			Handler:    _Sermon_UpdateSermon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sermon.proto",
}
